
import com.mysql.jdbc.Statement;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Kenneth
 */
public class adminPanel extends javax.swing.JFrame {
    private static final String JDBC_URL = "jdbc:mysql://localhost/labsched";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "12345";
    private Connection conn;

    /**
     * Creates new form adminPanel
     * @throws java.lang.ClassNotFoundException
     */
    public adminPanel() throws ClassNotFoundException {
        initComponents();
        connectToDatabase();
        populateLabTable();
    
    
}
      
    
    private void connectToDatabase() throws ClassNotFoundException {
           try {
           Class.forName("com.mysql.jdbc.Driver");
           conn = DriverManager.getConnection("jdbc:mysql://localhost/labsched","root", "12345");           
           System.out.println("Connected to the database. ");
        } catch (SQLException ex) {
        }
    
    }
    
    
 private void populateLabTable() {
    try (PreparedStatement stmt = conn.prepareStatement("SELECT * FROM lab");
         ResultSet rs = stmt.executeQuery()) {
        DefaultTableModel model = (DefaultTableModel) LabTable.getModel();
        model.setRowCount(0); // Clear existing rows
        while (rs.next()) {
            String name = rs.getString("name");
            String position = rs.getString("position");
            String semester = rs.getString("semester");
            String yearLevel = rs.getString("year_level");
            String section = rs.getString("section");
            String subject = rs.getString("subject");
            String time = rs.getString("time");
            String room = rs.getString("room");
            String month = rs.getString("month");
            String week = rs.getString("week");
            String day = rs.getString("day");
            String status = rs.getString("status");

            model.addRow(new Object[]{name, position, semester, yearLevel, section, subject, time, room, month, week, day, status});
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}

   
    private Map<String, Map<String, Integer>> getColumnCounts() {
        Map<String, Map<String, Integer>> columnCounts = new HashMap<>();
        try (PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM lab")) {
            ResultSet resultSet = pstmt.executeQuery();
            java.sql.ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            while (resultSet.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    String columnName = metaData.getColumnName(i);
                    String columnValue = resultSet.getString(i);
                    if (columnValue != null && !columnValue.isEmpty()) {
                        columnCounts.computeIfAbsent(columnName, k -> new HashMap<>())
                                .compute(columnValue, (k, v) -> v == null ? 1 : v + 1);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return columnCounts;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LabTable = new javax.swing.JTable();
        BPrint = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        acceptbtn = new javax.swing.JButton();
        declinebtn = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        BList = new javax.swing.JButton();
        BPreview = new javax.swing.JButton();
        BSearch = new javax.swing.JButton();
        TSearch = new javax.swing.JTextField();
        BRefresh = new javax.swing.JButton();
        BLogout = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );

        jLabel13.setFont(new java.awt.Font("Microsoft YaHei Light", 1, 16)); // NOI18N
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ascot-removebg-preview (1).png"))); // NOI18N
        jLabel13.setText("LABORATORY SCHEDULER");

        jPanel1.setBackground(new java.awt.Color(158, 209, 206));
        jPanel1.setPreferredSize(new java.awt.Dimension(1534, 800));

        LabTable.setBackground(new java.awt.Color(246, 246, 238));
        LabTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Position", "Semester", "Year Level", "Section", "Subject", "Time", "Room", "Month", "Week", "Day", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        LabTable.setRowHeight(40);
        jScrollPane1.setViewportView(LabTable);
        if (LabTable.getColumnModel().getColumnCount() > 0) {
            LabTable.getColumnModel().getColumn(1).setPreferredWidth(170);
            LabTable.getColumnModel().getColumn(4).setPreferredWidth(70);
            LabTable.getColumnModel().getColumn(5).setPreferredWidth(210);
            LabTable.getColumnModel().getColumn(6).setPreferredWidth(200);
            LabTable.getColumnModel().getColumn(7).setPreferredWidth(200);
            LabTable.getColumnModel().getColumn(11).setPreferredWidth(70);
        }

        BPrint.setBackground(new java.awt.Color(204, 102, 0));
        BPrint.setForeground(new java.awt.Color(255, 255, 255));
        BPrint.setText("Print");
        BPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPrintActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel12.setText("Powered by: Department of Information Technology");

        acceptbtn.setBackground(new java.awt.Color(204, 102, 0));
        acceptbtn.setForeground(new java.awt.Color(255, 255, 255));
        acceptbtn.setText("Accept");
        acceptbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptbtnActionPerformed(evt);
            }
        });

        declinebtn.setBackground(new java.awt.Color(204, 102, 0));
        declinebtn.setForeground(new java.awt.Color(255, 255, 255));
        declinebtn.setText("Decline");
        declinebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declinebtnActionPerformed(evt);
            }
        });

        deletebtn.setBackground(new java.awt.Color(204, 102, 0));
        deletebtn.setForeground(new java.awt.Color(255, 255, 255));
        deletebtn.setText("Delete");
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        BList.setText("List");
        BList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BListActionPerformed(evt);
            }
        });

        BPreview.setText("Preview");
        BPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPreviewActionPerformed(evt);
            }
        });

        BSearch.setText("Search");
        BSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSearchActionPerformed(evt);
            }
        });

        BRefresh.setText("Refresh");
        BRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(BSearch)
                .addGap(12, 12, 12)
                .addComponent(TSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(526, 526, 526))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(BPreview)
                        .addGap(33, 33, 33)
                        .addComponent(BPrint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(acceptbtn)
                        .addGap(18, 18, 18)
                        .addComponent(declinebtn)
                        .addGap(18, 18, 18)
                        .addComponent(deletebtn)
                        .addGap(18, 18, 18)
                        .addComponent(BList)
                        .addGap(396, 396, 396))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(acceptbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(declinebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BList)
                            .addComponent(BPreview))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addGap(38, 38, 38))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BSearch)
                            .addComponent(TSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BRefresh))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        BLogout.setBackground(new java.awt.Color(204, 102, 0));
        BLogout.setForeground(new java.awt.Color(255, 255, 255));
        BLogout.setText("Logout");
        BLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLogoutActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(627, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(549, 549, 549)
                .addComponent(BLogout)
                .addGap(24, 24, 24))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1522, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(BLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
    private void BLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLogoutActionPerformed
        // Ask for logout confirmation
        int response = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to log out?",
            "Logout Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        // Check the user's response
        if (response == JOptionPane.YES_OPTION) {
UserLogin userLogin = new UserLogin();
    userLogin.setVisible(true);
    dispose();
        }
    }//GEN-LAST:event_BLogoutActionPerformed

    private void declinebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declinebtnActionPerformed
   int selectedRow = LabTable.getSelectedRow();
    if (selectedRow != -1) {
        String name = LabTable.getValueAt(selectedRow, 0).toString(); // Get the name from the selected row
        try {
            String deleteQuery = "DELETE FROM lab WHERE name = ?";
            PreparedStatement deleteStatement = conn.prepareStatement(deleteQuery);
            deleteStatement.setString(1, name);
            int deletedRows = deleteStatement.executeUpdate();
            if (deletedRows > 0) {
                // Update the status column in the JTable to "Declined"
                LabTable.setValueAt("Declined", selectedRow, 11); // Assuming status column is at index 11
                JOptionPane.showMessageDialog(this, "Record deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete record", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Failed to delete record: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_declinebtnActionPerformed

    private void acceptbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptbtnActionPerformed
       int selectedRow = LabTable.getSelectedRow();
    if (selectedRow != -1) {
        String name = LabTable.getValueAt(selectedRow, 0).toString(); // Get the name from the selected row
        try {
            String query = "UPDATE lab SET status = 'Accepted' WHERE name = ?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, name);
            int updatedRows = statement.executeUpdate();
            if (updatedRows > 0) {
                JOptionPane.showMessageDialog(this, "Status updated to Accepted", "Success", JOptionPane.INFORMATION_MESSAGE);
                LabTable.setValueAt("Accepted", selectedRow, 11); // Update the status in the table
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update status", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Failed to update status: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_acceptbtnActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
   int selectedRow = LabTable.getSelectedRow();
    if (selectedRow != -1) {
        String status = LabTable.getValueAt(selectedRow, 11).toString(); // Get the status from the selected row

        // Check if the status is "Accepted"
        if (status.equals("Accepted")) {
            JOptionPane.showMessageDialog(this, "Cannot delete record with status 'Accepted'", "Deletion Error", JOptionPane.ERROR_MESSAGE);
        } else if (status.equals("Pending")) {
            // Ask for user confirmation before proceeding with deletion
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record with status 'Pending'?", "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (confirm == JOptionPane.YES_OPTION) {
                // If the user confirms, proceed with deletion
               
                String name = (String) LabTable.getValueAt(selectedRow, 0);

                // Delete the record from the database
                deleteRecordFromDatabase(name);
                
                // Remove the selected row from the JTable
                DefaultTableModel model = (DefaultTableModel) LabTable.getModel();
                model.removeRow(selectedRow);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to delete", "Selection Error", JOptionPane.ERROR_MESSAGE);
    }
    }
   private void deleteRecordFromDatabase(String name) {
       try {
       String deleteSQL = "DELETE FROM lab WHERE name = ?";
         try (PreparedStatement pstmt = (PreparedStatement) conn.prepareStatement(deleteSQL)) {
            pstmt.setString(1, name);
            pstmt.executeUpdate();
            
            System.out.println("Row deleted from the database.");
         }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error deleting data from database: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
             ex.printStackTrace();
}  
    }//GEN-LAST:event_deletebtnActionPerformed
private void printTable(JTable table, String room) throws PrinterException {
    PrinterJob printerJob = PrinterJob.getPrinterJob();
    printerJob.setPrintable((Graphics graphics, PageFormat pageFormat, int pageIndex) -> {
        if (pageIndex > 0) {
            return Printable.NO_SUCH_PAGE;
        }
        Graphics2D g2d = (Graphics2D) graphics;
        g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
        // Print default text at middle top
        String header = "LABORATORY SCHEDULE, Shared / Alternating Utilization, 2nd Semester. SY 2023-2024";
        FontMetrics metrics = g2d.getFontMetrics();
        var x1 = (int) ((pageFormat.getImageableWidth() - metrics.stringWidth(header)) / 2);
        g2d.drawString(header, x1, metrics.getHeight());
        // Print Laboratory with selected room
        String laboratory = "Laboratory " + room;
        g2d.drawString(laboratory, (int) pageFormat.getImageableX(), (int) pageFormat.getImageableY() + metrics.getHeight() * 2);
        // Translate the graphics to the start of the table
        g2d.translate(0, metrics.getHeight() * 3);
        // Render the JTable to fit the printable area
        double scale = 1.0;
        double width1 = pageFormat.getImageableWidth() / scale;
        double height1;
        height1 = pageFormat.getImageableHeight() / scale;
        g2d.scale(scale, scale);
        table.setSize((int) width1, table.getRowHeight() * (table.getRowCount() + 1));
        table.print(g2d);
        return Printable.PAGE_EXISTS;
    });
    if (printerJob.printDialog()) {
        printerJob.print();
    }
}

    private void BPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPrintActionPerformed
    printTable(LabTable);
}  

// Modify the printTable method to accept the selected room name
private void printTable(JTable table) {
   try {
        boolean complete = table.print(); // I-print ang JTable
        if (complete) {
            System.out.println("Printing Successful");
        } else {
            System.out.println("Printing Cancelled");
        }
    } catch (PrinterException pe) {
        System.out.println("Printing Failed: " + pe.getMessage());
    }
    }//GEN-LAST:event_BPrintActionPerformed

    private void BListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BListActionPerformed
             Map<String, Map<String, Integer>> columnCounts = getColumnCounts();

    StringBuilder result = new StringBuilder();
    result.append("<html><body>");
    
    for (Map.Entry<String, Map<String, Integer>> entry : columnCounts.entrySet()) {
        String columnName = entry.getKey();
        // Skip the "id" field
        if ("id".equalsIgnoreCase(columnName)) {
            continue;
        }
        columnName = "<b>" + capitalizeFirstLetter(columnName) + "</b>"; // Making the column name bold
        Map<String, Integer> counts = entry.getValue();
        int totalCount = counts.values().stream().mapToInt(Integer::intValue).sum();
        
        // Column name and total count
        result.append("<p>").append(columnName).append(": (").append(totalCount).append(")</p>");
        
        // Unordered list for specific counts
        result.append("<ul>");
        for (Map.Entry<String, Integer> countEntry : counts.entrySet()) {
            String value = capitalizeFirstLetter(countEntry.getKey());
            int count = countEntry.getValue();
            result.append("<li>").append(value).append(": ").append(count).append("</li>");
        }
        result.append("</ul>");
    }
    result.append("</body></html>");

    // Create a JLabel to hold the HTML content
    JLabel label = new JLabel(result.toString());

    // Create a JScrollPane to make the content scrollable
    JScrollPane scrollPane = new JScrollPane(label);
    scrollPane.setPreferredSize(new Dimension(400, 300)); // Set preferred size for the scroll pane

    JOptionPane.showMessageDialog(null, scrollPane, "Column Counts", JOptionPane.INFORMATION_MESSAGE);
}

private String capitalizeFirstLetter(String str) {
    return str.substring(0, 1).toUpperCase() + str.substring(1);

    }//GEN-LAST:event_BListActionPerformed

    private void BPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPreviewActionPerformed
  // Create the preview frame
JFrame previewFrame = new JFrame("Print Preview");
previewFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
previewFrame.setLayout(new BorderLayout());

// Create the print preview panel
JPanel printPreviewPanel = new JPanel(new BorderLayout());

// Create the top table panel
JPanel topTablePanel = new JPanel() {
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Add space between the title and the table
        int tableStartY = 0;

        // Set font for the additional rows
        Font additionalRowFont = new Font("Arial", Font.BOLD, 16);
        g.setFont(additionalRowFont);
        FontMetrics fm = g.getFontMetrics(additionalRowFont);

        // Draw the additional rows
        int additionalRowY = tableStartY + 20;
        String[] additionalTexts = {"LABORATORY SCHEDULE", "(Shared / Alternating Utilization)", "2nd Semester, SY 2023-2024", "Week A"};
        for (String text : additionalTexts) {
            int textWidth = fm.stringWidth(text);
            int textX = (getWidth() - textWidth) / 2; // Center horizontally
            g.drawString(text, textX, additionalRowY);
            additionalRowY += 20; // Adjust spacing
        }

        // Set font for the table headers (days and times)
        Font headerFont = new Font("Arial", Font.BOLD, 12);
        g.setFont(headerFont);

        // Draw the table
        int rowHeight = 50;
        int colWidth = 100;
        int numRows = 14;
        int numCols = 8;
        String[] days = {"Time", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
        String[] times = {"8:00AM - 9:00AM", "9:00AM - 10:00AM", "10:00AM - 11:00AM", "11:00AM - 12:00PM",
                          "12:00PM - 1:00PM", "1:00PM - 2:00PM", "2:00PM - 3:00PM", "3:00PM - 4:00PM",
                          "4:00PM - 5:00PM", "5:00PM - 6:00PM", "6:00PM - 7:00PM", "7:00PM - 8:00PM",
                          "8:00PM - 9:00PM"};

        // Draw column headers
        for (int col = 0; col < numCols; col++) {
            g.drawRect(col * colWidth, additionalRowY + 70, colWidth, rowHeight);
            g.drawString(days[col], col * colWidth + 10, additionalRowY + 70 + rowHeight / 2);
        }

        // Set font for the time column
        Font timeFont = new Font("Arial", Font.BOLD, 10);
        g.setFont(timeFont);

        // Draw rows
        for (int row = 0; row < numRows; row++) {
            g.drawRect(0, tableStartY + additionalRowY + 70 + row * rowHeight, colWidth, rowHeight);
            if (row > 0) {
                g.drawString(times[row - 1], 10, tableStartY + additionalRowY + 70 + row * rowHeight + rowHeight / 2);
            }
        }

        // Draw the rest of the table
        for (int row = 1; row < numRows; row++) {
            for (int col = 1; col < numCols; col++) {
                g.drawRect(col * colWidth, tableStartY + additionalRowY + 70 + row * rowHeight, colWidth, rowHeight);
            }
        }
    }
};

// Set preferred size of the top table panel
topTablePanel.setPreferredSize(new Dimension(800, 500)); // Adjust as needed

// Create the bottom table panel (similar to the top table panel)
JPanel bottomTablePanel = new JPanel() {
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        // Write the code for the bottom table here, similar to the top table panel
    }
};

// Set preferred size of the bottom table panel
bottomTablePanel.setPreferredSize(new Dimension(800, 500)); // Adjust as needed

// Add the top and bottom table panels to the print preview panel
printPreviewPanel.add(topTablePanel, BorderLayout.NORTH);
printPreviewPanel.add(bottomTablePanel, BorderLayout.SOUTH);

// Create the button panel
JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
JButton printButton = new JButton("Print");
buttonPanel.add(printButton);

// Add the print preview panel and button panel to the preview frame
previewFrame.add(printPreviewPanel, BorderLayout.CENTER);
previewFrame.add(buttonPanel, BorderLayout.SOUTH);

// Set frame properties
previewFrame.setSize(800, 1000); // Legal size: 8.5 x 14 inches
previewFrame.setLocationRelativeTo(null); // Center the frame
previewFrame.setVisible(true);
    }//GEN-LAST:event_BPreviewActionPerformed

    private void BRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRefreshActionPerformed
    refreshTable();


    }//GEN-LAST:event_BRefreshActionPerformed

    private void BSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSearchActionPerformed
 String searchText = TSearch.getText();
    if (!searchText.isEmpty()) {
        searchInDatabase(searchText);
    } else {
        JOptionPane.showMessageDialog(this, "Please enter a search query.", "Search Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void searchInDatabase(String searchText) {
    String searchSQL = "SELECT * FROM lab WHERE name LIKE ? OR position LIKE ? OR semester LIKE ? OR year_level LIKE ? OR section LIKE ? OR subject LIKE ? OR time LIKE ? OR room LIKE ? OR month LIKE ? OR week LIKE ? OR day LIKE ? OR status LIKE ?";
     try (Connection conn = LabSched.DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(searchSQL)) {
            String searchPattern = "%" + searchText + "%";
            for (int i = 1; i <= 12; i++) {
                pstmt.setString(i, searchPattern);
            }
        ResultSet rs = pstmt.executeQuery();
        DefaultTableModel model = (DefaultTableModel) LabTable.getModel();
        model.setRowCount(0); // Clear existing rows

        while (rs.next()) {
            String name = rs.getString("name");
            String position = rs.getString("position");
            String semester = rs.getString("semester");
            String yearLevel = rs.getString("year_level");
            String section = rs.getString("section");
            String subject = rs.getString("subject");
            String time = rs.getString("time");
            String room = rs.getString("room");
            String month = rs.getString("month");
            String week = rs.getString("week");
            String day = rs.getString("day");
            String status = rs.getString("status");

            model.addRow(new Object[]{name, position, semester, yearLevel, section, subject, time, room, month, week, day, status});
        }
                TSearch.setText("");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error searching database: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }



    }//GEN-LAST:event_BSearchActionPerformed

       
private void refreshTable() {
    // Logic to refresh the table with the latest data from the database
    try (Connection conn = LabSched.DatabaseConnection.getConnection();
         Statement stmt = (Statement) conn.createStatement()) {
        String sql = "SELECT * FROM lab";
        ResultSet rs = stmt.executeQuery(sql);
        
        DefaultTableModel model = (DefaultTableModel) LabTable.getModel();
        model.setRowCount(0); // Clear existing rows

        while (rs.next()) {
            String name = rs.getString("name");
            String position = rs.getString("position");
            String semester = rs.getString("semester");
            String yearLevel = rs.getString("year_level");
            String section = rs.getString("section");
            String subject = rs.getString("subject");
            String time = rs.getString("time");
            String room = rs.getString("room");
            String month = rs.getString("month");
            String week = rs.getString("week");
            String day = rs.getString("day");
            String status = rs.getString("status");

            model.addRow(new Object[]{name, position, semester, yearLevel, section, subject, time, room, month, week, day, status});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error refreshing table: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new adminPanel().setVisible(true);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(adminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BList;
    private javax.swing.JButton BLogout;
    private javax.swing.JButton BPreview;
    private javax.swing.JButton BPrint;
    private javax.swing.JButton BRefresh;
    private javax.swing.JButton BSearch;
    private javax.swing.JTable LabTable;
    private javax.swing.JTextField TSearch;
    private javax.swing.JButton acceptbtn;
    private javax.swing.JButton declinebtn;
    private javax.swing.JButton deletebtn;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
